<n>Introdução</n>
<info>
    Amoracoin é um sistema de moeda digital inovador, desenvolvido por Ravy Novais Sales em 24/12/2023, projetado para facilitar trocas online sem depender de dinheiro convencional. Diferentemente de muitas criptomoedas, a Amoracoin adota uma abordagem única que não se baseia em tecnologia blockchain. Esta moeda digital oferece uma alternativa eficiente e simplificada para transações online, promovendo uma adoção mais ampla de moedas digitais em diferentes setores.

    A biblioteca Amoracoin foi desenvolvida para facilitar a integração e a gestão das operações relacionadas a essa moeda digital em plataformas web. Com funções que permitem a autenticação de usuários, alteração de senhas, e visualização de informações detalhadas dos usuários na plataforma, a biblioteca proporciona uma experiência robusta e segura para os desenvolvedores que desejam implementar o sistema Amoracoin em seus projetos.
</info>
<fim>
    
    <n>Aviso sobre a Biblioteca</n>
<info>
    **IMPORTANTE**: Certifique-se de incluir a biblioteca corretamente em seu projeto antes de utilizar suas funções. Para começar, basta adicionar o código de inclusão e seguir as instruções de uso. Utilize as funções conforme a documentação para garantir a segurança e a eficiência de sua integração.

    Aqui está um exemplo de como incluir a biblioteca no seu projeto:
</info>
<cdHtml>
       <pre>
&lt;script src=&quot;https://amoracoin.vercel.app/amoracoinCloud/sys/amoracoinjs/cloud/Biblioteca/Amoracoin-5.0/Amoracoin.js&quot;&gt;&lt;/script&gt;
</pre>
    
</cdHtml>
<fim>

<n>1. Inicializar</n>
<info>
Inicializa a biblioteca <strong style="color: #007bff;">Amoracoin</strong>, configurando os parâmetros essenciais, como autenticação e URLs. Deve ser chamada obrigatoriamente antes de qualquer outra função da biblioteca.
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.inicializar()</code>
</cd>
<fim>

<n>2. Criar Conta</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.criarConta(email, senha, username)</strong><br>
Descrição: Cria uma nova conta de usuário com os dados fornecidos. Valida se o nome de usuário já está em uso e realiza a integração com o sistema de autenticação.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.criarConta("email@exemplo.com", "senha123", "usuarioNovo")</code><br>
.then(() => {<br>
    <code style="color: #007bff;">console.log("Conta criada com sucesso!");</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao criar conta:", error);</code><br>
});
</cd>
<fim>

<n>3. Login</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.login(email, senha)</strong><br>
Descrição: Autentica o usuário com as credenciais fornecidas, armazenando os dados necessários para operações futuras, como o token e a chave de transferência.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.login("email@exemplo.com", "senha123")</code><br>
.then(() => {<br>
    <code style="color: #007bff;">console.log("Login realizado com sucesso!");</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao fazer login:", error);</code><br>
});
</cd>
<fim>

<n>4. Saldo</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.saldo()</strong><br>
Descrição: Retorna o saldo atual de Amoracoins do usuário autenticado. Requer que o usuário esteja logado.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.saldo()</code><br>
.then(saldo => {<br>
    <code style="color: #007bff;">console.log("Saldo disponível:", saldo);</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao consultar saldo:", error);</code><br>
});
</cd>
<fim>

<n>5. Analisar Chave</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.AnalisarChave(chave)</strong><br>
Descrição: Verifica a chave de transferência fornecida e retorna o nome de usuário associado a ela, se encontrado.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.AnalisarChave("chaveExemplo123")</code><br>
.then(username => {<br>
    <code style="color: #007bff;">console.log("Usuário associado à chave:", username);</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao analisar chave:", error);</code><br>
});
</cd>
<fim>
    
<n>6. Minha Chave</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.MinhaChave()</strong><br>
Descrição: Recupera a chave de transferência associada à conta do usuário autenticado.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.MinhaChave()</code><br>
.then(chave => {<br>
    <code style="color: #007bff;">console.log("Minha chave de transferência:", chave);</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao obter minha chave:", error);</code><br>
});
</cd>
<fim>

<n>7. Transferir</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.transferir(valor, chaveDestinatario, chaveRemetente)</strong><br>
Descrição: Realiza uma transferência de Amoracoins entre dois usuários, verificando o saldo e as chaves fornecidas.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.transferir(50, "chaveDestino123", "chaveOrigem456")</code><br>
.then(() => {<br>
    <code style="color: #007bff;">console.log("Transferência realizada com sucesso!");</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao transferir:", error);</code><br>
});
</cd>
<fim>

<n>8. Obter Histórico de Transações</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.obterHistoricoTransacoes()</strong><br>
Descrição: Retorna o histórico de transações do usuário autenticado, incluindo transferências enviadas e recebidas.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.obterHistoricoTransacoes()</code><br>
.then(historico => {<br>
    <code style="color: #007bff;">console.log("Histórico de transações:", historico);</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao obter histórico:", error);</code><br>
});
</cd>
<fim>

<n>9. Logout</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.logout()</strong><br>
Descrição: Remove os dados de autenticação do usuário, encerrando a sessão atual.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.logout()</code><br>
.then(() => {<br>
    <code style="color: #007bff;">console.log("Logout realizado com sucesso!");</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao fazer logout:", error);</code><br>
});
</cd>
<fim>

<n>10. Total de Amoracoins Existentes</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.TotalDeAmoracoin()</strong><br>
Descrição: Retorna o total de Amoracoins disponíveis na plataforma.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.TotalDeAmoracoin()</code><br>
.then(total => {<br>
    <code style="color: #007bff;">console.log("Total de Amoracoins existentes:", total);</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao obter total de Amoracoins:", error);</code><br>
});
</cd>
<fim>

<n>11. Excluir Conta</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.excluirConta(email, senha)</strong><br>
Descrição: Exclui a conta do usuário autenticado, movendo o saldo de Amoracoins de volta ao total existente na plataforma.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.excluirConta("email@exemplo.com", "senha123")</code><br>
.then(() => {<br>
    <code style="color: #007bff;">console.log("Conta excluída com sucesso!");</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao excluir conta:", error);</code><br>
});
</cd>
<fim>

<n>12. Minerar</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.minerar()</strong><br>
Descrição: Tenta minerar Amoracoins, baseado em probabilidade. Se bem-sucedido, o saldo do usuário será incrementado.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.minerar()</code><br>
.then(sucesso => {<br>
    <code style="color: #007bff;">console.log(sucesso ? "Amoracoin minerado!" : "Nenhum Amoracoin encontrado.");</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao minerar:", error);</code><br>
});
</cd>
<fim>

<n>13. Congelar Amoracoins</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.CongelarAmoracoins({ nome, saldo })</strong><br>
Descrição: Congela uma quantidade de Amoracoins do saldo do usuário, gerando um arquivo que pode ser usado para descongelar no futuro.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.CongelarAmoracoins({ nome: "meuArquivo", saldo: 100 })</code><br>
.then(result => {<br>
    <code style="color: #007bff;">console.log("Amoracoins congelados com sucesso:", result);</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao congelar Amoracoins:", error);</code><br>
});
</cd>
<fim>

<n>14. Descongelar Amoracoins</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.DescongelarAmoracoins(arquivo)</strong><br>
Descrição: Descongela Amoracoins usando um arquivo gerado previamente pelo sistema.<br>
Exemplo de Uso:
</info>
<cd>
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.DescongelarAmoracoins(arquivo)</code><br>
.then(valor => {<br>
    <code style="color: #007bff;">console.log("Amoracoins descongelados:", valor);</code><br>
})<br>
.catch(error => {<br>
    <code style="color: #d9534f;">console.error("Erro ao descongelar Amoracoins:", error);</code><br>
});
</cd>
<fim>

<n>15. Alterar Nome</n>
<info>
Nome da Função: <strong style="color: #007bff;">Amoracoin.alterarNome(novoUsername)</strong><br>
Descrição: Atualiza o nome de usuário para o novo valor fornecido, verificando se já está em uso.
Exemplo de Uso:
</info>
<cd>
<span class="blue-text">Amoracoin.alterarNome("novoUsuario")</span>
    .then(username => {
        console.log("Nome atualizado com sucesso:", username);
    })
    .catch(error => {
        console.error("Erro ao alterar nome:", error);
    });
</cd>
<fim>
   
<n>16. Alterar Senha</n> 
<info> 
Nome da Função: <strong style="color: #007bff;">Amoracoin.alterarSenha(senhaAntiga, novaSenha)</strong><br> 
Descrição: Altera a senha do usuário autenticado para um novo valor.<br> 
Exemplo de Uso: 
</info> 
<cd> 
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.alterarSenha("senhaAtual", "novaSenha123")</code><br> 
.then(() => {<br> 
<code style="color: #007bff;">console.log("Senha alterada com sucesso!");</code><br> 
})<br> 
.catch(error => {<br> 
<code style="color: #d9534f;">console.error("Erro ao alterar senha:", error);</code><br> 
}); 
</cd> 
<fim>

<n>17. Usuários na Plataforma</n> 
<info> 
Nome da Função: <strong style="color: #007bff;">Amoracoin.UsersAmoracoin()</strong><br> 
Descrição: Retorna uma lista de todos os usuários registrados na plataforma, ordenados pelo saldo em ordem decrescente. Essa função ajuda a visualizar os principais detentores de Amoracoins.<br> 
Exemplo de Uso: 
</info> 
<cd> 
<code style="color: #28a745;"><span style="color: #007bff;">Amoracoin</span>.UsersAmoracoin()</code><br> 
.then(usuarios => {<br> 
<code style="color: #007bff;">console.log("Usuários na plataforma:", usuarios);</code><br> 
})<br> 
.catch(error => {<br> 
<code style="color: #d9534f;">console.error("Erro ao obter usuários:", error);</code><br> 
}); 
</cd> 
<fim>
    
<n>Conclusão</n>
<info>
    Esta documentação cobre os métodos essenciais do sistema Amoracoin, permitindo gerenciamento de usuário, transações, mineração e exclusão de conta.
</info>
